/*
https://www.acmicpc.net/problem/1463

문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
2. X가 2로 나누어 떨어지면, 2로 나눈다.
3. 1을 뺀다.

정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 10^6보다 작거나 같은 정수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
*/

#include "Solve_1463.h"
#include <iostream>
#include <algorithm>

using namespace std;

namespace BP1463
{
	/*
	DP 접근 방식
	1. DP[i] 는 i를 1로 만드는데 필요한 최소 연산 횟수를 저장하는 배열
	2. 초기 조건으로 DP[1] = 0 (1은 이미 1이므로 연산횟수 0)
	3. i가 2 이상일 때, 각 수에 대해 3가지 연산을 고려해, 최소 연산 횟수 갱신
		- i가 3으로 나눠지면, DP[i]는 DP[i / 3] + 1
		- i가 2로 나눠지면, DP[i]는 DP[i / 2] + 1
		- 항상 1을 뺄 수 있기 때문에, DP[i]는 DP[i - 1] + 1
	*/
	void Solve_1463()
	{
		int N = 0;
		cin >> N;

		int DP[1000001];	// DP[i]는 i를 1로 만드는 최소 연산 횟수
		DP[1] = 0;			// 1은 이미 1이므로 연산 횟수 0

		// 2 ~ N 까지 DP 배열 
		for (int i = 2; i <= N; ++i)
		{
			// 1을 뺄 때는 항상 DP[i-1] + 1
			DP[i] = DP[i - 1] + 1;

			if (i % 2 == 0)
			{
				DP[i] = min(DP[i], DP[i / 2] + 1);
			}

			if (i % 3 == 0)
			{
				DP[i] = min(DP[i], DP[i / 3] + 1);
			}
		}

		cout << DP[N] << endl;
	}
}